generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id              String  @id @default(cuid())
  email           String
  password        String
  image           String?
  tax             Float? // 20%
  companyNumber   String?
  region          String?
  province        String?
  municipality    String?
  barangay        String?
  companyAddress  String?
  zipCode         String?
  gmailSmtp       String?
  appPasswordSmtp String?
  darkLogo        String?
  lightLogo       String?
  companyName     String?
  companyTagLine  String?
  refundableDays  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Policies {
  id                             String   @id @default(cuid())
  legalNotice                    String?
  productListingPolicy           String?
  intellectualPropertyProtection String?
  privacyPolicy                  String?
  termsOfUse                     String?
  integrityCompliance            String?
  refundPolicy                   String?
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt
}

model CompanyHours {
  id        String  @id @default(cuid())
  day       String
  timeStart String?
  timeEnd   String?
  isOpen    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Faqs {
  id       String  @id @default(cuid())
  topic    String
  question String
  answer   String
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id              String    @id @default(cuid())
  username        String?   @unique
  firstName       String?
  lastName        String?
  email           String    @unique
  password        String?
  isEmailVerified Boolean   @default(false)
  otpCode         String?
  otpExpiresAt    DateTime?
  image           String?
  phoneNumber     String?
  gender          String?
  dateOfBirth     String?

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participantConversations ParticipantConversation[]
  sentMessages             Message[]
  seenMessages             Message[]                 @relation("Seen")

  order         Order[]
  address       Address[]
  like          Like[]
  invoiceInfo   InvoiceInfo[]
  conversation  Conversation[]
  followStore   FollowStore[]
  ticket        Ticket[]
  productReview ProductReview[]
}

model Address {
  id            String  @id @default(cuid())
  fullName      String
  contactNumber String
  homeAddress   String
  barangay      String
  city          String
  province      String
  region        String
  zipCode       String
  isDefault     Boolean @default(false)
  type          String // e.g., "Home", "Work", "Other"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  order       Order[]
  invoiceInfo InvoiceInfo[]

  @@index([userId])
}

model Rider {
  id                 String    @id @default(uuid())
  name               String?
  email              String    @unique
  password           String
  vehicleType        String?
  gender             String?
  dateOfBirth        String?
  phoneNumber        String?
  licenseNumber      String?
  plateNumber        String?
  vehicleOwnerShip   String?
  licenseIdImg       String?
  certRegImg         String?
  officialReceiptImg String?
  vehicleBackImg     String?
  profileImg         String?
  otpCode            String?
  otpExpiresAt       DateTime?
  onDuty             Boolean   @default(true)
  isEmailVerified    Boolean   @default(false)
  adminApproval      String    @default("Pending") // Pending, Under Review, Approved, Rejected

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
}

model Vendor {
  id                     String    @id @default(uuid())
  name                   String?
  email                  String    @unique
  image                  String?
  password               String?
  type                   String?
  dti                    String?
  bir                    String?
  barangayBusinessPermit String?
  identity               String?
  identityType           String?
  sec                    String?
  givenName              String?
  middleName             String?
  familyName             String?
  otpCode                String?
  otpExpiresAt           DateTime?
  isPremium              Boolean   @default(false)
  adminApproval          String    @default("Pending") // Pending, Under Review, Approved, Rejected
  isEmailVerified        Boolean   @default(false)

  businessType String? // Food, NonFood, Service, Digital

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastActiveAt DateTime?

  categorySlug String?
  category     Category? @relation(fields: [categorySlug], references: [slug], onDelete: Cascade)

  product                  Product[]
  productDiscount          ProductDiscount[]
  newArrivalDiscount       NewArrivalDiscount[]
  coupon                   Coupon[]
  promoCode                PromoCode[]
  orderItem                OrderItem[]
  transaction              Transaction[]
  paymentAccount           PaymentAccount[]
  subscription             Subscription[]
  vendorAddress            VendorAddress[]
  vendorPolicies           VendorPolicies[]
  vendorFaqs               VendorFaqs[]
  automatedResponse        AutomatedResponse[]
  conversation             Conversation[]
  participantConversations ParticipantConversation[]
  sentMessages             Message[]
  followStore              FollowStore[]
  campaigns                Campaign[]
  ticket                   Ticket[]
  campaignProduct          CampaignProduct[]
}

model VendorAddress {
  id            String @id @default(uuid())
  address       String
  contactNumber String
  status        String @default("Open") // Open, Closed
  type          String // e.g., "Pickup Warehouse", "Return Warehouse"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId])
}

model VendorPolicies {
  id                 String @id @default(uuid())
  name               String
  content            String
  adminAprovalStatus String @default("Under Review") // Under Review, Approved, Rejected

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model VendorFaqs {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId])
}

model AutomatedResponse {
  id             String   @id @default(cuid())
  defaultEnabled Boolean  @default(false)
  defaultMessage String?
  offWorkEnabled Boolean  @default(false)
  offWorkMessage String?
  workingDays    String[] @default([])
  // Store as JSON in the database
  workingHours   Json     @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model Category {
  id    String  @id @default(uuid())
  name  String
  slug  String  @unique
  image String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  subCategories SubCategory[]
  vendor        Vendor[]
  product       Product[]
}

model SubCategory {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  category     Category @relation(fields: [categorySlug], references: [slug], onDelete: Cascade)
  categorySlug String

  product Product[]
}

model Product {
  id                  String  @id @default(uuid())
  name                String
  slug                String  @unique
  description         String
  isThereVariants     Boolean @default(false)
  adminApprovalStatus String  @default("Pending") // Pending, Approved, Rejected

  // Media
  images    String[]
  video     String?
  sizeChart String?

  // Single product fields when no variants
  sku   String?
  price Float?
  stock Int?

  // Shipping
  weight             Float?
  weightUnit         String? // e.g. "kg", "g", "lbs"
  dimensionUnit      String? // e.g. "cm", "inches"
  length             Float?
  width              Float?
  height             Float?
  isPerishable       Boolean @default(false)
  isFragile          Boolean @default(false)
  storageTemperature String? // e.g. "2-8Â°C", "Room Temperature"
  shippingPolicy     String?

  // SEO and marketing
  metaTitle               String?
  metaDescription         String?
  tags                    String[]
  seoKeywords             String[]
  isFeatured              Boolean  @default(false)
  brand                   String?
  onTimeDeliveryGuarantee Boolean  @default(false)
  onSiteServiceGuarantee  Boolean  @default(false)
  freeReplacementParts    Boolean  @default(false)

  // Policies
  warrantyDuration String? // e.g. "1 year", "6 months"
  warrantyContent  String?
  returnPolicy     String?

  // Food specific fields
  ingredients         String?
  allergens           String[]
  storageInstructions String?
  expirationDate      DateTime?
  countryOfOrigin     String?

  // Service specific fields
  serviceDuration     String? // e.g., "1 hour", "2 days"
  serviceLocationType String[] // "remote", "in-person", "both"
  serviceAreas        String[] // For location-based services
  schedulingRequired  Boolean  @default(false)

  // Other fields
  soldCount       Int   @default(0)
  popularityScore Float @default(0.0)
  averageRating   Float @default(0.0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  categorySlug String
  category     Category @relation(fields: [categorySlug], references: [slug], onDelete: Cascade)

  subCategorySlug String
  subCategory     SubCategory @relation(fields: [subCategorySlug], references: [slug], onDelete: Cascade)

  productDiscountId String?
  productDiscount   ProductDiscount? @relation(fields: [productDiscountId], references: [id], onDelete: Cascade)

  newArrivalDiscount   NewArrivalDiscount? @relation(fields: [newArrivalDiscountId], references: [id], onDelete: Cascade)
  newArrivalDiscountId String?

  specifications   Specification[]
  variants         ProductVariant[]
  nutritionalFacts NutritionalFact[]
  orderItem        OrderItem[]
  productView      ProductView[]
  like             Like[]
  message          Message[]
  campaigns        Campaign[]
  campaignProduct  CampaignProduct[]
  productReview    ProductReview[]
}

model NutritionalFact {
  id                   String  @id @default(uuid())
  servingSize          String?
  servingsPerContainer String?
  calories             String?
  totalFat             String?
  saturatedFat         String?
  transFat             String?
  cholesterol          String?
  sodium               String?
  totalCarbohydrates   String?
  dietaryFiber         String?
  totalSugars          String?
  addedSugars          String?
  protein              String?
  vitaminD             String?
  calcium              String?
  iron                 String?
  potassium            String?

  // Optional additional nutrients
  vitaminA        String?
  vitaminC        String?
  vitaminE        String?
  vitaminK        String?
  thiamine        String?
  riboflavin      String?
  niacin          String?
  vitaminB6       String?
  folate          String?
  vitaminB12      String?
  biotin          String?
  pantothenicAcid String?
  phosphorus      String?
  iodine          String?
  magnesium       String?
  zinc            String?
  selenium        String?
  copper          String?
  manganese       String?
  chromium        String?
  molybdenum      String?
  chloride        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  productId String  @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Specification {
  id        String   @id @default(uuid())
  attribute String // e.g., "color", "size", "material"
  values    String[] // e.g., ["red", "blue", "green"]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, attribute])
}

model ProductVariant {
  id       String  @id @default(uuid())
  sku      String?
  price    Float
  quantity Int
  image    String?

  // Variant attributes (JSON for flexibility)
  attributes Json // e.g., {"color": "red", "size": "L"}

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  productId            String
  product              Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  campaignVariantStock CampaignVariantStock[]
}

model ProductDiscount {
  id        String   @id @default(uuid())
  discount  String
  startDate String
  endDate   String
  type      String
  value     Float
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminApprovalStatus String @default("Pending")

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  products  Product[]
  orderItem OrderItem[]

  @@index([vendorId])
}

model NewArrivalDiscount {
  id        String   @id @default(uuid())
  discount  String
  startDate String
  endDate   String
  type      String
  value     Float
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminApprovalStatus String @default("Pending")

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  products  Product[]
  orderItem OrderItem[]

  @@index([vendorId])
}

model Coupon {
  id                String   @id @default(uuid())
  name              String
  startDate         DateTime
  endDate           DateTime
  type              String
  discountAmount    Float?
  minimumSpend      Float?
  claimableQuantity Int
  claimedQuantity   Int      @default(0)
  status            String   @default("Active")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  adminApprovalStatus String @default("Pending")

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  orderItem OrderItem[]

  @@index([vendorId])
}

model PromoCode {
  id                String   @id @default(uuid())
  name              String
  code              String   @unique
  startDate         DateTime
  endDate           DateTime
  type              String
  discountAmount    Float?
  minimumSpend      Float?
  claimableQuantity Int
  claimedQuantity   Int      @default(0)
  status            String   @default("Active")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  adminApprovalStatus String @default("Pending")

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  orderItem OrderItem[]

  @@index([vendorId])
}

model Order {
  id              String  @id @default(uuid())
  orderNumber     String  @unique
  status          String  @default("Pending") // Pending, Processing, Shipped, Driver Assigned, Out For Delivery, Delivered, Cancelled, Returned
  paymentStatus   String  @default("Pending")
  xenditInvoiceId String?
  paymentMethod   String

  totalAmount    Float
  discountAmount Float?
  deliveryFee    Float?
  vehicleType    String?
  remarks        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  processingAt     DateTime?
  shippedAt        DateTime?
  driverAssignedAt DateTime?
  outForDeliveryAt DateTime?
  deliveredAt      DateTime?
  cancelledAt      DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  addressId String
  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  riderId String?
  rider   Rider?  @relation(fields: [riderId], references: [id], onDelete: SetNull)

  orderItem   OrderItem[]
  invoiceInfo InvoiceInfo[]
}

model OrderItem {
  id       String @id @default(cuid())
  quantity Int
  price    Float

  status    String   @default("Pending") // Pending, Accepted, Out For Delivery, Delivered, Cancelled
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  productDiscountId    String?
  newArrivalDiscountId String?
  couponId             String?
  promoCodeId          String?

  productDiscount    ProductDiscount?    @relation(fields: [productDiscountId], references: [id])
  newArrivalDiscount NewArrivalDiscount? @relation(fields: [newArrivalDiscountId], references: [id])
  coupon             Coupon?             @relation(fields: [couponId], references: [id])
  promoCode          PromoCode?          @relation(fields: [promoCodeId], references: [id])
}

model InvoiceInfo {
  id          String   @id @default(uuid())
  invoiceNo   String   @unique
  tinId       String?
  companyName String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderId String?
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  addressId String
  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String @id @default(uuid())
  referenceNo String @unique
  amount      Float
  status      String @default("To Settle") // Settled, Transferred, Declined, To Settle
  type        String // Withdrawal, Earnings, Refund, etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model PaymentAccount {
  id              String  @id @default(uuid())
  paymentType     String // e.g., "Bank", "E-Wallet"
  accountName     String
  accountNumber   String
  paymentProvider String // e.g., "GCash", "PayMaya", "Paypal", "Coins.PH"
  expirationDate  String?
  cvc             String?
  isDefault       Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model Subscription {
  id            String  @id @default(uuid())
  invoiceNumber String  @unique
  name          String
  description   String?
  price         Float
  status        String  @default("Active") // Active, Inactive

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  images    String[]
  status    String   @default("Active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model News {
  id        String        @id @default(cuid())
  title     String
  category  String
  type      String
  thumbnail String
  status    String        @default("Active")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  sections  NewsSection[]
}

model NewsSection {
  id       String @id @default(cuid())
  newsId   String
  news     News   @relation(fields: [newsId], references: [id], onDelete: Cascade)
  heading  String
  content  String
  order    Int
  anchorId String @unique
}

model ProductView {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  ipAddress String
  viewedAt  DateTime @default(now())

  @@unique([productId, ipAddress])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Conversation {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  isPinned      Boolean  @default(false)
  isUnread      Boolean  @default(false)
  isMuted       Boolean  @default(false)

  // Each conversation is between a customer and a vendor
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  messages     Message[]
  participants ParticipantConversation[]

  @@unique([userId, vendorId])
  @@index([vendorId])
}

model ParticipantConversation {
  id             String       @id @default(cuid())
  userId         String?
  user           User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  vendorId       String?
  vendor         Vendor?      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  joinedAt       DateTime     @default(now())
  lastSeenAt     DateTime?

  @@unique([userId, vendorId, conversationId])
  @@index([vendorId])
  @@index([conversationId])
}

model Message {
  id          String    @id @default(cuid())
  body        String?
  image       String?
  file        String?
  video       String?
  productId   String?
  product     Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  seenAt      DateTime?
  isAutoReply Boolean   @default(false)

  // Who has seen the message
  seenBy User[] @relation("Seen")

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  // Sender can be either User or Vendor
  senderUserId String?
  senderUser   User?   @relation(fields: [senderUserId], references: [id], onDelete: Cascade)

  senderVendorId String?
  senderVendor   Vendor? @relation(fields: [senderVendorId], references: [id], onDelete: Cascade)

  // Ensure either senderUser or senderVendor is set
  @@index([senderUserId])
  @@index([senderVendorId])
  @@index([conversationId])
  @@index([productId])
}

model FollowStore {
  id        String   @id @default(cuid())
  userId    String
  vendorId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  vendor Vendor @relation(fields: [vendorId], references: [id])

  @@unique([userId, vendorId])
  @@index([vendorId])
}

model PageView {
  id        String   @id @default(cuid())
  platform  String
  count     Int      @default(0)
  ip        String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Campaign {
  id                    String   @id @default(cuid())
  title                 String
  details               String
  criteria              String
  campaignStartDate     DateTime
  campaignEndDate       DateTime
  registrationStartDate DateTime
  registrationEndDate   DateTime
  type                  String
  value                 Float

  images String[]
  banner String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products        Product[]
  vendors         Vendor[]
  campaignProduct CampaignProduct[]
}

model CampaignProduct {
  id String @id @default(uuid())

  // Campaign-specific pricing (if different from regular price)
  campaignPrice      Float?
  discountPercentage Float? // Calculated field: (retail - campaign) / retail * 100
  status             String @default("Pending")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  variantStocks CampaignVariantStock[]
}

model CampaignVariantStock {
  id String @id @default(uuid())

  campaignStock Int // The stock allocated for this variant in the campaign
  soldCount     Int @default(0) // Track how many sold during campaign

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  campaignProductId String
  campaignProduct   CampaignProduct @relation(fields: [campaignProductId], references: [id], onDelete: Cascade)

  // For products with variants
  productVariantId String?
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
}

model Ticket {
  id           String   @id @default(cuid())
  topic        String
  details      String
  specifyIssue String
  attachments  String[]
  status       String   @default("Open") // Open, Resolved
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  vendorId String?
  vendor   Vendor? @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model Revenue {
  id     String @id @default(cuid())
  amount Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductReview {
  id          String   @id @default(cuid())
  rating      Int
  review      String
  images      String[]
  isAnonymous Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
